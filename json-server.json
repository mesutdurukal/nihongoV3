"use strict";

const fs = require('fs');
const path = require('path');
const express = require('express');
const logger = require('morgan');
const cors = require('cors');
const compression = require('compression');
const errorhandler = require('errorhandler');
const bodyParser = require('./body-parser'); // Ensure this is correctly implemented or replaced if needed

module.exports = function (opts) {
  const userDir = path.join(process.cwd(), 'public');
  const defaultDir = path.join(__dirname, '../../public');
  const staticDir = fs.existsSync(userDir) ? userDir : defaultDir;

  opts = Object.assign({
    logger: true,
    static: staticDir
  }, opts);

  const app = express(); // Create an Express app

  // Apply compression to all responses
  if (!opts.noGzip) {
    app.use(compression());
  }

  // Enable CORS for all requests, with specific configuration if needed
  if (!opts.noCors) {
    app.use(cors({
    origin: true, // Adjust this as needed for deployment
    credentials: true
    }));
  }

  // Use error handler only in development environment
  if (process.env.NODE_ENV === 'development') {
    app.use(errorhandler());
  }

  // Serve static files from specified directory
  app.use(express.static(opts.static));

  // Use morgan logger in the development environment to log HTTP requests
  if (opts.logger) {
    app.use(logger('dev', {
    skip: req => process.env.NODE_ENV === 'test' || req.path === '/favicon.ico'
    }));
  }

  // No cache headers for Internet Explorer
  app.use((req, res, next) => {
    res.header('Cache-Control', 'no-cache');
    res.header('Pragma', 'no-cache');
    res.header('Expires', '-1');
    next();
  });

  // Read-only mode: allow only GET requests
  if (opts.readOnly) {
    app.use((req, res, next) => {
      if (req.method === 'GET') {
        next();
      } else {
        res.sendStatus(403); // Forbidden
      }
    });
  }

  // Body parser middleware, check that bodyParser is correctly implemented
  if (opts.bodyParser) {
    app.use(bodyParser);
  }

  return app; // Return the configured Express app
};
